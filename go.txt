// -----------------------------------------------
// 참고 기본 소스
package main

import (
	"fmt"
	"github.com/samillee/go_study/stringutil"
)

func main() {
	fmt.Printf("hello, world\n")
	fmt.Printf(stringutil.Reverse("hello, world\n"))
}


// -----------------------------------------------
// sublime 내에서 go 소스 build 및 run, #으로 시작
# build
# run


// -----------------------------------------------
// 기본폴더 폴더
mkdir %gopath%/src/github.com/samillee/패키지
cd %gopath%/src/github.com/samillee
cd %gopath%/bin


// 표준 폴더 bin과 pkg 등에 실행 파일 생성
go install github.com/samillee/hello2
dir %gopath%/bin
%gopath%/bin/hello2

// Getting remote package, 아주 간담함
go get github.com/go-martini/martini

// 빌드 명령은 명령 수행한 곳에 실행 파일 생성
go build github.com/samillee/hello2


// 환경 설정 해줘야 할 것 들
// 윈도우
mkdir d:\dev\goworkspace
set GOPATH
set GOROOT
set PATH

set GOPATH=d:\dev\goworkspace
set GOROOT=c:\go
set PATH=%PATH%;%GOROOT%\bin

// 리눅스
export GOROOT=$HOME/go
export PATH=$PATH:$GOROOT/bin


// -----------------------------------------------
// 공부하기 참고 사이트
https://github.com/GoesToEleven
https://www.golang-book.com/books/intro (Caleb Doxsey)
https://talks.golang.org
https://gobyexample.com/ 
https://godoc.org/

// -----------------------------------------------
// Tour - Interactive : https://tour.golang.org
go tool tour

package main

import (
	"fmt"
	"time"
	"math/rand"
)

func main() {
	rand.Seed(time.Now().UnixNano()) // 초기화 해줘야 매번 다른 값 나옴
	fmt.Println("The time is", time.Now())
	fmt.Println("rand.Intn(100): ", rand.Intn(100))
}

// [Basics] -----------------------------------------------
// Packages, Functions, Variables -----------------------------------------------
// Packages, Imports, Exported names, Functions, Multiple results, Named return values
// Variables, Variables with initializers, Short variable declarations, Basic types, Zero (default) values
// Type conversions, Type inference, Constants, Numeric Constants
main for package and function for executables
exported if it begins with a capital letter
function: func add(x int, y int) int { return x + y }
func swap(x, y string) (string, string) { return y, x }

"naked" return : without arguments returns the named return values.
Naked return should be used only in short functions for readability.

func split(sum int) (x, y int) {
	x = sum * 4 / 9
	y = sum - x
	return
}
var v = 10 // 주의 정의 위치에 따라 오류기도하고 아니기도 함, 함수 내에서는 오류
var i, j int = 1, 2
c, python, java := 1, false, "no!"

bool
string
int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr
byte // alias for uint8
rune // 중요 alias for int32, represents a Unicode code point
float32 float64
complex64 complex128
// The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems 
// and 64 bits wide on 64-bit systems. 

Type conversion : T(v)
주의: Constants cannot be declared using the := syntax.

// Flow control: for, if, else, switch, defer -----------------------------------------------
// for, for is Go's while, Forever, If, If with a short statatment, If and else, Switch, Switch eval order, Switch with no condition (long if-then-else)
// Defer, Stacking defers
sum := 0
for i := 0; i < 10; i++ { sum += i	}
for ; sum2 < 231; { sum2 += sum2 } == for sum2 < 231 { sum2 += sum2 }
for sum2 < 231 { sum2 += sum2 } == for sum2 < 231 { sum2 += sum2 }
for { }
func sqrt(x float64) string {
	if x < 0 {
		return sqrt(-x) + "i" // calling itself again for negation
	}
	return fmt.Sprint(math.Sqrt(x))
}
for, if, switch statements can start with a short statement before the condition.
func pow(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim { return v }
	return lim
}


switch os := runtime.GOOS; os { // break 없어도 한개만 실행하고 빠져 나옴
	case "darwin": fmt.Println("OS X")
	case "linux": fmt.Println("Linux")
	default: fmt.Printf("%s", os)
}

t := time.Now()
switch { // 긴 if-else 대체 용도
// switch t := time.Now(); {
// 오류 switch t := time.Now(); _ {
// switch _; {
	case t.Hour() < 12: fmt.Println("Good morning!")
	case t.Hour() < 17: fmt.Println("Good afternoon.")
	default: fmt.Println("Good evening.")
}

for i := 0; i < 3; i++ { defer fmt.Println("defer for:", i) }

// More types: struct, slice, map, function values and closures -----------------------------------------------
// Pointers, Struct, Struct fields, Pointers to structs, Struct Literals, Arrays, 
// Slices, Slice literals, Slice defaults, Slice lenght and capacity, Nil slices, 
// Creating a slice with make, Slices of slices, Appending to a slice, Range
// Maps, Map literals, Mutating Maps, 
// Function values, Function closures

The type *T is a pointer to a T value. Its zero value is nil.
"dereferencing" or "indirecting"
Unlike C, Go has no pointer arithmetic.
A struct is a collection of fields.

type Vertex struct {
	X int
	Y int
}

allowed to write just p.X, without the explicit dereference.
v := Vertex{1, 2} // 주의 creator 없이도 바로 값 입력해서 사용할 수 있음
p := &v
p.X = 1e9

v2 = Vertex{X: 1}  // can list just a subset of fields

// Moar struct (Embedding struct) : struct can have main type. specify a type without a variable
type gam struc{
	Vertex
	life int
}


var a [2]string
primes := [6]int{2, 3, 5, 7, 11, 13}

An array has a fixed size.
A slice is a dynamically-sized, flexible view into the elements of an array. 
In practice, slices are much more common than arrays.
Slices are like references to arrays
Changing the elements of a slice modifies the corresponding elements of its underlying array.
Other slices that share the same underlying array will see those changes.
[low:high bound]
primes := [6]int{2, 3, 5, 7, 11, 13}
var slc []int = primes[1:2] : 주의 slc := primes[1:2] 이럼 array가 생성될 듯 함
fmt.Println(slc)

r := []bool{true, true, false} : slice create if without the length.

slc2 := []struct { i int; b bool }
	{ {2, true}, {3, false}, {5, true}, {7, true}, {11, false}, {13, true}, }
fmt.Println(slc2)

var a [10]int
a[0:10] == a[:10] == a[0:] == a[:]

func printSlice(s []int) { fmt.Printf(len(s), cap(s), s) }

var s []int
fmt.Println(s, len(s), cap(s))
if s == nil {
	fmt.Println("nil!")
}

주의
b := make([]int, 0, 5) // len(b)=0, cap(b)=5
b = b[:cap(b)] // len(b)=5, cap(b)=5
b = b[1:]      // len(b)=4, cap(b)=4

Slices can contain any type, including other slices.

board := [][]string{
	[]string{"_", "_", "_"}, []string{"_", "_", "_"}, []string{"_", "_", "_"}, }
board[0][0] = "X"

s = append(s, 2, 3, 4) // can add more than one element at a time.

// range 통해 인덱스와 값 동시에 구하기, map은 키 값 가져옴
for i, v := range pow { fmt.Printf("2**%d = %d\n", i, v) } 
for _, value := range pow { fmt.Printf("%d\n", value) }

var myMap map[string]Vertex2
myMap = make(map[string]Vertex2)
myMap["Allif"] = Vertex2{40.68433, -74.39967}
myMap["Google"] = Vertex2{ 37.42202, -122.08408, }
==
var myMap = map[string]Vertex2{
	"Allif": Vertex2{ 40.68433, -74.39967, },
	"Google": Vertex2{ 37.42202, -122.08408, },
}
// 추천 Map for structs 생성 및 초기화 방법
// 주의: 정의 안된 키 값 경우 해당 타입의 기본 값을 줌
// 해서 경우에 따라 존재 여부 체크 필요
==
var myMap = map[string]Vertex2{
	"Bell Labs": {40.68433, -74.39967},
	"Google":    {37.42202, -122.08408},
}

m[key] = elem
elem = m[key]
delete(m, key)
elem, ok := m[key] // elem, ok = m[key]    // 이전에 정의된 경우

if val, ok := myMap["g"]; ok {
	fmt.Println(myMap["g"])
}



Functions are values too - passed around just like other values.
Function values may be used as function arguments and return values.

A closure is a function value that references variables from outside its body. 
The function may access and assign to the referenced variables; 
in this sense the function is "bound" to the variables.
== static var for a function ???

func adder() func(int) int {
	sum := 0
	return func(x int) int { sum += x; return sum }
}

// [Methods and Interfaces] -----------------------------------------------
// Methods and Interfaces -----------------------------------------------
// Methods, Methods vs. Functions, Pointer receivers, Pointers and functions, Methods and pointer indirection, Value or pointer receiver, 
// Interfaces, Interfaces implemented implicitly, Interface values, Nil interface values, Empty interface
// Type assertions, type switches, Stringers, Errors, Readers, Images
Go does not have classes. 
However, you can define methods on types.
A method is a function with a special receiver argument.
Methods with pointer receivers can modify the value to which the receiver points 
and avoid copying the value on each method call.
Pointer receivers are more common than value receivers.

func (v Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) }
func (v *Vertex) Scale(f float64) { v.X = v.X * f; v.Y = v.Y * f }

Functions with a pointer argument must take a pointer
As a convenience, v.Scale(5) as (&v).Scale(5).
Methods with pointer receivers take either a value or a pointer when they are called
Methods with value receivers take either a value or a pointer when they are called

//Interfaces
An interface type is defined as a set of method signatures.
A value of interface type can hold any value that implements those methods.
Interface differentiates the pointer type and the value type implementations.
Interfaces are implemented implicitly - no "implements" keyword.
Implicit interfaces decouple the definition of an interface from its implementation, 
which could then appear in any package without prearrangement.

Calling a method on an interface value executes the method its underlying type.

//Interface values with nil underlying values
If the concrete value is nil, the method will be called with a nil receiver.
In Go it is common to write methods that gracefully handle being called with a nil receiver.
Note that an interface value that holds a nil concrete value is itself non-nil.

func (t *T) M() {
	if t == nil {
		fmt.Println("<nil>")
		return
	}
	fmt.Println(t.S)
}

Nil interface values
Calling a method on a nil interface is a run-time error. : interface{}

An empty interface may hold values of any type.
Every type implements at least zero methods.

func describe(i interface{}) {
	fmt.Printf("(%v, %T)\n", i, i)
}

A type assertion provides access to an interface value's underlying concrete value.
t := i.(T)     // If i does not hold a T, the statement will trigger a panic.
t, ok := i.(T) // test if i holds a T

Type switch
switch v := i.(type) { ... }

Stringer in fmt package : One of the most ubiquitous interfaces
A Stringer is a type that can describe itself as a string. 
The fmt package (and many others) look for this interface to print values.

type Stringer interface { String() string }

The error type is a built-in interface similar to fmt.Stringer:
Go programs express error state with error values.
fmt package looks for the error interface when printing values.

type error interface { Error() string }

Functions often return an error value, and calling code should handle errors 
by testing whether the error equals nil.
A nil error denotes success; a non-nil error denotes failure.

// *Make error examples

io.Reader interface
func (T) Read(b []byte) (n int, err error)
It returns an io.EOF error when the stream ends.
rr := strings.NewReader("Hello, Reader!")

type Image interface {
    ColorModel() color.Model
    Bounds() Rectangle
    At(x, y int) color.Color
}
im := image.NewRGBA(image.Rect(0, 0, 100, 100))
fmt.Println(im.Bounds(), im.At(0, 0), im.At(0, 0).RGBA())

// [Concurrency] -----------------------------------------------
// Goroutines, Channels, Buffered channels, Range and close, Select, Default selection, sync Mutex

A goroutine is a lightweight thread managed by the Go runtime.
Goroutines run in the same address space, so access to shared memory must be synchronized. 
The sync package provides useful primitives, although you won't need them much in Go.

Channels are a typed conduit through which you can send and receive values with the channel operator, <-.
ch <- v                   // Send v to channel ch.
v := <-ch                 // Receive from ch, and assign value to v.
v, ok := <-ch             // test whether closed by assigning a second parameter
ch := make(chan int)
ch := make(chan int, 2)   // buffered channel


By default, sends and receives block until ready without explicit locks or condition variables.

func sum(s []int, c chan int) {
	sum := 0
	for _, v := range s { sum += v }
	c <- sum // send sum to c
}

Note: Only the sender should close a channel, never the receiver.
Channels aren't like files; you don't usually need to close them. 
Closing is only necessary when the receiver must be told there are no more values coming, 
such as to terminate a range loop.

// select, default
Select blocks until one of its cases can run, then it executes that case. 
It chooses one at random if multiple are ready.
Use "default" to try a send or receive without blocking:

To make sure only one goroutine can access a variable at a time to avoid conflicts.
use mutual exclusion with sync.Mutex and its two methods: Lock and Unlock
Mutual exclusion by surrounding it with a call to Lock and Unlock.

Use defer to ensure the mutex will be unlocked as in the Value method.

type SafeCounter struct {
	v   map[string]int
	mux sync.Mutex
}

func (c *SafeCounter) Inc(key string) {
	c.mux.Lock()
	c.v[key]++
	c.mux.Unlock()
}


// -----------------------------------------------
// Go Concurrency Patterns  Google I/O 2012
https://talks.golang.org/2012/concurrency.slide#1

Generator: function that returns a channel
Channels are first-class values, just like strings or integers.

// Generator pattern
func boring3Pattern(msg string) <-chan string { // returns receive-only channel
	c := make(chan string)

	go func() { // launch the goroutine
		le3 := 10
		for i := 0; ; i++ {
			n := time.Now()
			time.Sleep(time.Duration(rand.Intn(le3)) * time.Millisecond)
			c <- fmt.Sprintf("%s %d %v", msg, i, time.Since(n))
		}
	}()
	return c // Return the channel to the caller.
}

// Generator pattern for mulitplexing
func fanIn(input1, input2 <-chan string) <-chan string {
	c := make(chan string)
	go func() { for { c <- <- input1 } }()
	go func() { for { c <- <- input2 } }()
	return c
}
